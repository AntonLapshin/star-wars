{"version":3,"sources":["img/logo.png","components/Search/Search.js","components/Character/Character.js","components/CharacterDetails/schema.js","components/CharacterDetails/CharacterDetails.js","components/LoadIndicator/LoadIndicator.js","services/data-provider.js","containers/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","React","memo","value","placeholder","onChange","className","type","e","target","spellCheck","replace","defaultProps","Character","name","isSelected","onClick","schema","hair_color","skin_color","eye_color","birth_year","gender","mass","height","Field","title","CharacterDetails","data","Object","keys","map","key","LoadIndicator","request","url","a","fetch","then","response","json","count","nextUrl","next","items","results","search","pattern","loadMore","Dashboard","state","searchPattern","isLoading","isLoadingMore","selectedIndex","updateSearchPattern","setState","searchRequestDebounce","searchRequest","debounce","loadMoreRequest","concat","index","this","characterDetails","length","Math","min","isNoItemsFound","character","i","selectItem","loadMoreButton","content","numberOfLeftItems","PureComponent","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00d356ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c6d12234.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Search.css';\n\nconst Search = React.memo(({ value, placeholder, onChange }) => {\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        className=\"search-input\"\n        onChange={e => {\n          onChange(e.target.value);\n        }}\n        placeholder={placeholder}\n        value={value}\n        spellCheck={false}\n      />\n      <span className=\"input-highlight\">{value.replace(/ /g, '_')}</span>\n    </div>\n  );\n});\n\nSearch.propTypes = {\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func\n};\n\nSearch.defaultProps = {\n  placeholder: 'Search...'\n};\n\nexport { Search };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Character.css';\n\nconst Character = React.memo(({ name, isSelected, onClick }) => {\n  let className = `character`;\n  if (isSelected) {\n    className += ' active';\n  }\n  return (\n    <div className={className} onClick={onClick}>\n      {name}\n    </div>\n  );\n});\n\nCharacter.propTypes = {\n  name: PropTypes.string,\n  isSelected: PropTypes.bool,\n  onClick: PropTypes.func\n};\n\nexport { Character };\n","export const schema = {\n  hair_color: 'Hair color',\n  skin_color: 'Skin color',\n  eye_color: 'Eye color',\n  birth_year: 'Birth year',\n  gender: 'Gender',\n  mass: 'Mass',\n  height: 'Height'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CharacterDetails.css';\nimport { schema } from './schema';\n\nconst Field = React.memo(({ title, value }) => {\n  return (\n    <>\n      <div className=\"title\">{title}</div>\n      <div className=\"value\">{value}</div>\n    </>\n  );\n});\n\nconst CharacterDetails = React.memo(({ data }) => {\n  return (\n    <div className=\"character-details\">\n      <h2>{data.name}</h2>\n      <ul>\n        {Object.keys(schema).map(key => (\n          <li key={key}>\n            <Field title={schema[key]} value={data[key]} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n\nCharacterDetails.propTypes = {\n  data: PropTypes.object\n};\n\nexport { CharacterDetails };\n","import React from 'react';\nimport './LoadIndicator.css';\n\n//\n// Taken from https://loading.io/css/\n//\nconst LoadIndicator = () => (\n  <div className=\"lds-wrapper\">\n    <div className=\"lds-dual-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n);\n\nexport { LoadIndicator };\n","const URL = 'https://swapi.co/api/people/?search=';\nexport const pageSize = 10;\n\nconst extractData = response => {\n  return {\n    count: response.count,\n    nextUrl: response.next,\n    items: response.results\n  };\n};\n\nconst request = async url => {\n  const json = await fetch(url).then(response => response.json());\n  return extractData(json);\n};\n\n/**\n * Calls the Star Wars API to get the data by search pattern\n * @param {string} pattern\n * @returns {Promise<object>} The first page of the results\n */\nexport const search = pattern => request(URL + pattern);\n\n/**\n * Gets the next page of the requested data\n * to get the next page\n *\n * @param {string} nextUrl\n * @returns {Promise<object>} The next page of the results\n */\nexport const loadMore = request;\n","import React from 'react';\nimport './Dashboard.css';\nimport { Search } from '../../components/Search/Search';\nimport { Character } from '../../components/Character/Character';\nimport { CharacterDetails } from '../../components/CharacterDetails/CharacterDetails';\nimport { debounce } from 'lodash';\nimport { LoadIndicator } from '../../components/LoadIndicator/LoadIndicator';\nimport { pageSize, search, loadMore } from '../../services/data-provider';\n\nclass Dashboard extends React.PureComponent {\n  state = {\n    searchPattern: '',\n    isLoading: false,\n    items: [],\n    count: 0,\n    nextUrl: null,\n    isLoadingMore: false,\n    selectedIndex: -1\n  };\n\n  get isNoItemsFound() {\n    return this.state.items.length === 0 && this.state.searchPattern !== '';\n  }\n\n  get numberOfLeftItems() {\n    return Math.min(pageSize, this.state.count - this.state.items.length);\n  }\n\n  get characterDetails() {\n    return this.state.selectedIndex !== -1 && <CharacterDetails data={this.state.items[this.state.selectedIndex]} />;\n  }\n\n  get items() {\n    if (this.state.isLoading) {\n      return <LoadIndicator />;\n    }\n    if (this.isNoItemsFound) {\n      return <span className=\"no-items\">No characters found</span>;\n    }\n    return (\n      <ul>\n        {this.state.items.map((character, i) => {\n          return (\n            <li key={character.name}>\n              <Character\n                name={character.name}\n                onClick={() => this.selectItem(i)}\n                isSelected={this.state.selectedIndex === i}\n              />\n            </li>\n          );\n        })}\n        {this.loadMoreButton}\n      </ul>\n    );\n  }\n\n  get loadMoreButton() {\n    if (!this.state.nextUrl) {\n      return null;\n    }\n    const content = this.state.isLoadingMore\n      ? 'Loading...'\n      : `Load next ${this.numberOfLeftItems} (loaded ${this.state.items.length} out of ${this.state.count})`;\n    return (\n      <li key={'loadMore'}>\n        <Character name={content} onClick={this.loadMoreRequest} />\n      </li>\n    );\n  }\n\n  selectItem(index) {\n    this.setState({\n      selectedIndex: index\n    });\n  }\n\n  updateSearchPattern = searchPattern => {\n    this.setState({\n      searchPattern,\n      isLoading: true,\n      selectedIndex: -1\n    });\n\n    this.searchRequestDebounce(searchPattern);\n  };\n\n  searchRequest = async pattern => {\n    if (pattern === '') {\n      this.setState({\n        isLoading: false,\n        items: [],\n        nextUrl: null,\n        count: 0\n      });\n      return;\n    }\n    const { count, nextUrl, items } = await search(pattern);\n    this.setState({\n      isLoading: false,\n      items,\n      count,\n      nextUrl\n    });\n  };\n\n  searchRequestDebounce = debounce(this.searchRequest, 1000);\n\n  loadMoreRequest = async () => {\n    this.setState({\n      isLoadingMore: true\n    });\n    const { count, nextUrl, items } = await loadMore(this.state.nextUrl);\n    this.setState({\n      isLoadingMore: false,\n      items: this.state.items.concat(items),\n      count,\n      nextUrl\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"dashboard\">\n        <div className=\"dashboard-main\">\n          <Search\n            value={this.state.searchPattern}\n            onChange={this.updateSearchPattern}\n            placeholder=\"Start typing here for search\"\n          />\n          <div className=\"search-results\">{this.items}</div>\n        </div>\n        <div className=\"dashboard-details\">{this.characterDetails}</div>\n      </div>\n    );\n  }\n}\n\nexport { Dashboard };\n","import React from 'react';\nimport logo from './img/logo.png';\nimport './App.css';\nimport { Dashboard } from './containers/Dashboard/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <img src={logo} className=\"app-logo\" alt=\"logo\" />\n        <h1>Character Search</h1>\n      </header>\n      <section className=\"app-container\">\n        <Dashboard />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}